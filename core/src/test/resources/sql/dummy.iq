# dummy.iq - Scratch space
#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to you under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
!use scott

select MGR, MGR as manager, MGR as manager1 from emp where MGR = 0;
EnumerableCalc(expr#0..7=[{inputs}], expr#8=[CAST($t3):INTEGER], expr#9=[0], expr#10=[=($t8, $t9)], MGR=[$t3], MANAGER=[$t3], MANAGER1=[$t3], $condition=[$t10])
  EnumerableTableScan(table=[[scott, EMP]])
!plan

select count(*) from (select MGR, MGR as manager, MGR as manager1 from emp where MGR = 0) as alias group by MGR;
EnumerableCalc(expr#0..1=[{inputs}], EXPR$0=[$t1])
  EnumerableAggregate(group=[{3}], EXPR$0=[COUNT()])
    EnumerableCalc(expr#0..7=[{inputs}], expr#8=[CAST($t3):INTEGER], expr#9=[0], expr#10=[=($t8, $t9)], proj#0..7=[{exprs}], $condition=[$t10])
      EnumerableTableScan(table=[[scott, EMP]])
!plan

select count(*) from (select MGR, MGR as manager, MGR as manager1 from emp where MGR = 0) as alias group by manager1;
EnumerableCalc(expr#0..1=[{inputs}], EXPR$0=[$t1])
  EnumerableAggregate(group=[{3}], EXPR$0=[COUNT()])
    EnumerableCalc(expr#0..7=[{inputs}], expr#8=[CAST($t3):INTEGER], expr#9=[0], expr#10=[=($t8, $t9)], proj#0..7=[{exprs}], $condition=[$t10])
      EnumerableTableScan(table=[[scott, EMP]])
!plan

select MGR+2 from (select MGR, MGR as manager, MGR as manager1 from emp where MGR = 0) as alias;
EnumerableCalc(expr#0..7=[{inputs}], expr#8=[2], expr#9=[+($t3, $t8)], expr#10=[CAST($t3):INTEGER], expr#11=[0], expr#12=[=($t10, $t11)], EXPR$0=[$t9], $condition=[$t12])
  EnumerableTableScan(table=[[scott, EMP]])
!plan

select manager+2 from (select MGR, MGR as manager, MGR as manager1 from emp where MGR = 0) as alias;
EnumerableCalc(expr#0..7=[{inputs}], expr#8=[2], expr#9=[+($t3, $t8)], expr#10=[CAST($t3):INTEGER], expr#11=[0], expr#12=[=($t10, $t11)], EXPR$0=[$t9], $condition=[$t12])
  EnumerableTableScan(table=[[scott, EMP]])
!plan

select 2, deptno, job from emp as e1
union all
select 2, deptno, job from emp as e2;

EnumerableUnion(all=[true])
  EnumerableCalc(expr#0..7=[{inputs}], expr#8=[2], EXPR$0=[$t8], DEPTNO=[$t7], JOB=[$t2])
    EnumerableTableScan(table=[[scott, EMP]])
  EnumerableCalc(expr#0..7=[{inputs}], expr#8=[2], EXPR$0=[$t8], DEPTNO=[$t7], JOB=[$t2])
    EnumerableTableScan(table=[[scott, EMP]])
!plan

select MGR,0  from emp where MGR = 0
union all
select MGR,0  from emp where MGR = 0;
!plan

# End dummy.iq
